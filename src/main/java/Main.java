import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.ParseTree;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * Main file that takes in input a regular expression and creates a NFA using thompson's rules and checks
 * n number of strings which are also given in input, if they can be generated by the NFA.
 */
public class Main {
    public static void main(String[] args) throws IOException {
        Scanner scanner = new Scanner(System.in);
        System.out.println("*******************************************");
        System.out.println("This program allows you to give in input a regular expression followed by a ',' and then " +
                "a list of strings. eg.a+b, a, b, c, d.");
        System.out.println("If the input is not valid it will throw a RuntimeException.");
        System.out.println("To use a .txt file for input, type '_file'.");
        System.out.println("To terminate program, type '_exit'.");

        while(true){
            System.out.print("> ");
            String input = scanner.nextLine();
            if(input.equals("_exit")){
                System.exit(0);
            }
            else if(input.equals("_file")) {

                File f = new File("");
                f = new File(f.getCanonicalPath() + "/src/main/java/input.txt");
                Scanner file = new Scanner(f);

                while(file.hasNextLine()){
                    String file_input = file.nextLine();
                    System.out.println(">INPUT: " + file_input);
                    System.out.println(" OUTPUT: " + program(file_input));
                }
            }
            else{
                System.out.println(program(input));
            }
        }
    }

    /**
     * method created to pass input without scanner for junit tests.
     * @param input regular expression ',' string ',' string ',' .....
     */
    public static String program(String input){
        GrammarSampleLexer lexer = new GrammarSampleLexer(CharStreams.fromString(input));
        CommonTokenStream token = new CommonTokenStream(lexer);
        GrammarSampleParser parser = new GrammarSampleParser(token);

        //To exit program if input was not valid.
        addException(parser, input);

        ParseTree tree = parser.init();
        Visitor v = new Visitor();
        ThompsonNFA result = v.visit(tree);
        return stringFormat(result.getOutput());
    }

    /**
     * adds a new RuntimeException that is thrown when input is not valid.
     * @param parser parser to which add the exception.
     * @param input input on which exception is generated.
     */
    private static void addException(GrammarSampleParser parser, String input){
        parser.removeErrorListeners();
        parser.addErrorListener(new BaseErrorListener() {
            @Override
            public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line, int charPositionInLine, String msg, RecognitionException e) {
                throw new RuntimeException("Parsing error: " + msg + " on input: " + input);
            }
        });
    }

    /**
     * formats the output into comma separated string.
     * @param list list to format.
     * @return formatted comma separated string.
     */
    private static String stringFormat(ArrayList<String> list){
        StringBuilder output = new StringBuilder();
        for(int i = 0; i < list.size(); i++){
            output.append(list.get(i));
            if(i < list.size() - 1)
                output.append(", ");
        }
        return output.toString();
    }

}
